/*
 * This source file was generated by the Gradle 'init' task
 */
package com.lockerfish.unit2

class App {

  fun conditional() {
    val condition = true
    // AND operator in kotlin is &&
    // all conditions must be true for the block to execute
    if (condition && 1 == 1 && 2 == 2) { // each type is inferred
      println("AND Condition is true")
    } else {
      println("AND Condition is false")
    }

    // OR operator in kotlin is ||
    // any condition must be true for the block to execute
    if (condition || 1 == 2 || 2 == 3) {
      println("OR Condition is true")
    } else {
      println("OR Condition is false")
    }

    val trafficLightColor = "Red"

    if (trafficLightColor.lowercase() == "red") {
      println("Stop")
    } else if (trafficLightColor == "Yellow") {
      println("Slow down")
    } else if (trafficLightColor == "Green") {
      println("Go")
    } else {
      println("Invalid color")
    }
  }

  fun whenStatement() {
    val trafficLightColor = "Red"

    when (trafficLightColor.lowercase()) {
      "red" -> println("Stop")
      "yellow" -> println("Slow down")
      "green" -> println("Go")
      else -> println("Invalid color")
    }

    val num = 1
    when (num) {
      1 -> println("One")
      2 -> println("Two")
      3 -> println("Three")
      else -> println("Invalid number")
    }

    when (num) {
      1, 2 -> println("One or Two")
      3 -> println("Three")
      else -> println("Invalid number")
    }

    when (num) {
      in 1..10 -> println("Between 1 and 10")
      else -> println("Invalid number")
    }

    val x: Any = 13
    when (x) {
      is Int -> println("Int")
      is Float -> println("Float")
      is Double -> println("Double")
      else -> println("Invalid number")
    }
  }

  fun asExpressions() {

    val y: Any =
            if (1 == 1) {
              "One"
            } else {
              "Not One"
            }
    println(y)

    val x: Any =
            when (2) {
              1 -> "One"
              2 -> "Two"
              3 -> "Three"
              else -> "Not Listed"
            }
    println(x)
  }

  // nullability
  fun nullability() {
    val name: String? = null
    if (name != null) {
      println(name.length)
    } else {
      println("Name is null")
    }

    // the elvis operator
    val length = name?.length ?: -1
    println(length)
  }
}

class Child : Person {
  constructor(name: String, age: Int) : super(name, age)

  override fun showSecret(code: Int) {
    println("child does not have a secret")
  }
}

// classes and objects in kotlin
open class Person(val name: String, val age: Int) {
  constructor() : this("John Doe", 0)
  constructor(name: String) : this(name, 0)

  private var secret = 1234

  var yourSecret: Int = secret
    set(value) {
      secret = value
    }

  fun greet() {
    println("Hello, my name is $name and I am $age years old")
  }

  fun greet(name: String) {
    println("Hello, $name, my name is $name and I am $age years old")
  }

  fun greet(greeting: Int) {
    println("$greeting, my name is $name and I am $age years old")
  }

  open fun showSecret(code: Int) {
    if (code == secret) {
      println("My secret is $secret")
    } else {
      println("Invalid code")
    }
  }
}

fun main() {
  // App().conditional()
  // App().whenStatement()
  // App().asExpressions()

  // nullability
  // App().nullability()

  // classes and objects in kotlin
  val person = Person("Mike", 20) // create an instance of the class Person
  println(person.name)
  println(person.age)
  // person.name = "new name" // this will not compile because name is a val
  // println(person.secret) // this will not compile because secret is private
  person.greet()
  person.greet("John")
  person.greet(1234)
  person.yourSecret = 124
  person.showSecret(124)

  val person2 = Person()
  println(person2.name)

  val child = Child("Jane", 10)
  println(child.name)
  println(child.showSecret(1234))
  println(child.greet())
}
